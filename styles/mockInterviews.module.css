@keyframes wave {
  0%, 100% { background-position: 0% 50%; }
  50%      { background-position: 100% 50%; }
}

/* full-width animated gradient behind content */
.background {
  position: fixed;
  top: 0;
  left: 250px;   /* sidebar width */
  right: 0;
  bottom: 0;
  background: linear-gradient(270deg, #1a2634, #2e2e80, #4a1c6f);
  background-size: 600% 600%;
  animation: wave 20s ease infinite;
  z-index: -1;
}

/* card */
.container {
  max-width: 700px;
  margin: 0 auto;
  padding: 2rem;
  background: rgba(10,10,35,0.9);
  border-radius: 12px;
  box-shadow: 0 8px 20px rgba(0,255,255,0.2);
  color: #e0e0ff;
  position: relative;
}

/* slide-in animation */
.slideIn {
  animation: slideIn 0.5s ease;
}
@keyframes slideIn {
  from { transform: translateX(50px); opacity: 0; }
  to   { transform: translateX(0);     opacity: 1; }
}

/* progress bar */
.progressBar { height:6px; background:#2d2d44; border-radius:3px; overflow:hidden; margin-bottom:1rem; }
.progress    { height:100%; background:#00ffff; transition:width 0.5s ease; }

.title      { font-size:2.5rem; text-align:center; margin-bottom:0.5rem; }
.counter    { text-align:center; margin-bottom:1.5rem; color:#a0a0ff; }

.questionLabel { font-weight:600; color:#a0a0ff; margin-bottom:0.5rem; }
.questionText  { font-style:italic; border-left:4px solid #00ffff; padding-left:1rem; margin-bottom:1.5rem; }

/* floating label */
.floating { position:relative; margin-bottom:1rem; }
.textarea {
  width:100%; min-height:140px; padding:1rem;
  background:#1a1a2e; color:#fff; border:1px solid #444; border-radius:8px;
  transition:border-color 0.3s;
}
.textarea:focus { outline:none; border-color:#00ffff; }
.floating label {
  position:absolute; top:1rem; left:1rem;
  color:#888; pointer-events:none; transition:all 0.2s;
}
.floating label.filled,
.textarea:focus + label {
  top:-0.6rem; left:0.8rem;
  background:rgba(10,10,35,0.9); padding:0 0.3rem;
  font-size:0.85rem; color:#00ffff;
}

/* buttons & nav */
.navButtons { display:flex; gap:0.5rem; margin-top:0.75rem; }
.navButtons .button { flex:1; }

.button {
  padding:0.8rem; background:#3182ce; border:none; border-radius:8px;
  color:#fff; font-weight:600; cursor:pointer;
  position:relative; overflow:hidden; transition:background 0.3s;
}
.button:hover:not(:disabled) { background:#2b6cb0; }
.button:disabled { background:#555; cursor:not-allowed; }

.button.loading { color:transparent; }
.button.loading::after {
  content:''; position:absolute; top:50%; left:50%;
  width:1rem; height:1rem; margin:-0.5rem;
  border:2px solid #fff; border-top-color:transparent;
  border-radius:50%; animation:spin 1s linear infinite;
}

.shake { animation:shake 0.5s; }
@keyframes spin { to{transform:rotate(360deg);} }
@keyframes shake { 0%,100%{transform:translateX(0);}25%{transform:translateX(-5px);}75%{transform:translateX(5px);} }

/* feedback cards */
.feedbackBox { margin-top:1.5rem; background:#111; border:1px solid #444; border-radius:8px; overflow:hidden; }
.feedbackBox summary { padding:0.8rem 1rem; background:#000; color:#00ffff; font-weight:600; cursor:pointer; }
.feedbackList { padding:1rem; list-style:none; margin:0; }
.feedbackItem { background:#1a1a2e; padding:0.6rem 1rem; margin-bottom:0.5rem; border-left:4px solid #00ffff; border-radius:4px; }

/* fadeIn for feedback summary if needed */
.fadeIn { animation:slideIn 0.5s ease; }

/* responsive */
@media(max-width:600px){
  .container { margin:1rem; padding:1rem; }
  .title { font-size:1.8rem; }
  .progressBar { height:4px; }
  .navButtons { flex-direction:column; }
}


/src/app/dashboard/mockInterview/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import styles from '../../../../styles/mockInterviews.module.css';

const questions = [
  'Describe a time when you had to step up and demonstrate leadership skills.',
  'Tell me about a time you were under a lot of pressure at work or school. What was going on, and how did you get through it?',
  'Give me an example of a time you managed numerous responsibilities. How did you handle that?',
  Can you share an example of a time when you had to adapt to a rapidly changing project requirement?,
  Tell me about a time you worked well under pressure.,
  Describe a time you received tough or critical feedback. How did you respond to it?,
  Describe a time when you had to give someone difficult feedback. How did you handle it?,
  Describe a time when you anticipated potential problems and developed preventive measures.,
  Tell me about a time when you had to deal with a significant change at work. How did you adapt to this change?
];

export default function MockInterview() {
  const [index, setIndex] = useState(0);
  const [answer, setAnswer] = useState('');
  const [feedback, setFeedback] = useState('');
  const [loading, setLoading] = useState(false);
  const [shake, setShake] = useState(false);

  const question = questions[index];
  const progress = ((index + 1) / questions.length) * 100;

  // Load draft from localStorage on question change
  useEffect(() => {
    const draft = localStorage.getItem(draft-${index}) || '';
    setAnswer(draft);
    setFeedback('');
  }, [index]);

  // Auto‑save draft whenever answer or index changes
  useEffect(() => {
    localStorage.setItem(draft-${index}, answer);
  }, [index, answer]);

  // Keyboard shortcuts: ←/→ and Enter
  useEffect(() => {
    const handler = (e: KeyboardEvent) => {
      if (e.key === 'ArrowRight') {
        handleNext();
      } else if (e.key === 'ArrowLeft') {
        handlePrev();
      } else if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {
        handleSubmit();
      }
    };
    window.addEventListener('keydown', handler);
    return () => window.removeEventListener('keydown', handler);
  });

  const handleShake = () => {
    setShake(true);
    setTimeout(() => setShake(false), 500);
  };

  const handleSubmit = async () => {
    if (!answer.trim()) return handleShake();
    setLoading(true);
    const res = await fetch('/api/getFeedback', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ question, answer }),
    });
    const data = await res.json();
    setFeedback(data.feedback);
    setLoading(false);
  };

  const handleNext = () => {
    setIndex(i => (i + 1) % questions.length);
  };
  const handlePrev = () => {
    setIndex(i => (i - 1 + questions.length) % questions.length);
  };

  // Smooth scroll into view on question change
  useEffect(() => {
    document.getElementById('mock-container')?.scrollIntoView({ behavior: 'smooth' });
  }, [index]);

  return (
    <div className={styles.pageWrapper}>
      <div className={styles.background} />

      <div key={index} id="mock-container" className={${styles.container} ${styles.slideIn}}>
        <div className={styles.progressBar}>
          <div className={styles.progress} style={{ width: ${progress}% }} />
        </div>

        <h1 className={styles.title}>Mock Interview Practice</h1>
        <p className={styles.counter}>Question {index + 1} of {questions.length}</p>

        <p className={styles.questionLabel}>Question:</p>
        <p className={${styles.questionText}}>{question}</p>

        <div className={styles.floating}>
          <textarea
            className={styles.textarea}
            value={answer}
            onChange={e => setAnswer(e.target.value)}
            disabled={loading}
          />
          <label className={answer ? styles.filled : ''}>Your Answer</label>
        </div>

        <div className={styles.navButtons}>
          <button className={styles.button} onClick={handlePrev} disabled={loading}>
            ← Previous
          </button>
          <button
            className={${styles.button} ${loading ? styles.loading : ''} ${shake ? styles.shake : ''}}
            onClick={handleSubmit}
            disabled={loading}
          >
            {loading ? 'Thinking…' : 'Submit Answer'}
          </button>
          <button className={styles.button} onClick={handleNext} disabled={loading}>
            Next →
          </button>
        </div>

        {feedback && (
          <details open className={styles.feedbackBox}>
            <summary className={styles.feedbackTitle}>AI Feedback</summary>
            <ul className={styles.feedbackList}>
              {feedback.split('\n').map((line, i) => (
                <li key={i} className={styles.feedbackItem}>{line.trim()}</li>
              ))}
            </ul>
          </details>
        )}
      </div>
    </div>
  );
}
  